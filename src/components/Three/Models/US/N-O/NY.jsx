/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useCallback, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useActiveStates } from '../../../../../context/State/StateCtx';

export default function NY({ ...props }) {
  const [isHovered, setIsHovered] = useState(false);
  const [positionY, setPositionY] = useState(0.125);
  const [active, setActive] = useState(false);
  const group = useRef()
  const { setActiveStates } = useActiveStates([]);

  const onHover = useCallback((e, value) => {
    e.stopPropagation(); //stop ref at first intersection
    e.target;
    setIsHovered(value);
    // isHovered = true
  }, [setIsHovered]);

  function handleClick() {
    setActive(v => !v);
    active ? setPositionY(0.125) :
    setPositionY(2);
    setActiveStates((prevState) => {
      return [ ...prevState, 'NY' ];
    });
  }

  const { nodes, materials } = useGLTF('models/ny/NewYork.glb')
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        geometry={nodes.Plane085.geometry}
        material={materials.Material}
        position={[8.4, positionY, -4.85]}
        scale={[1, -0.05, 1]}
        onPointerOver={e => onHover(e, true)} 
        onPointerOut={e => onHover(e, false)}
        onClick={() => handleClick()}
      >
        <meshStandardMaterial
          color = {isHovered ? 'gray' : '#63E2C6'}
        />
      </mesh>
    </group>
  )
}

useGLTF.preload('models/ny/NewYork.glb');
